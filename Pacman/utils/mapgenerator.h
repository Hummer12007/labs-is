#ifndef MAPGENERATOR_H
#define MAPGENERATOR_H
#include <array>
#include <functional>
#include <random>
#include "HelperStructs.h"
#include "cassert"


const std::array<std::array<char, 21>, 21> CLASSIC_MAP = {{
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','o','o','o','o','o','o','o','o','#','o','o','o','o','o','o','o','o','#','#',},
    {'#','#','o','#','#','o','#','#','#','o','#','o','#','#','#','o','#','#','o','#','#',},
    {'#','#','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','#','#',},
    {'#','#','o','#','#','o','#','o','#','#','#','#','#','o','#','o','#','#','o','#','#',},
    {'#','#','o','o','o','o','#','o','o','o','#','o','o','o','#','o','o','o','o','#','#',},
    {'#','#','#','#','#','o','#','#','#','.','#','.','#','#','#','o','#','#','#','#','#',},
    {'#','#','#','#','#','o','#','.','.','.','.','.','.','.','#','o','#','#','#','#','#',},
    {'#','#','#','#','#','o','#','.','#','#','.','#','#','.','#','o','#','#','#','#','#',},
    {'#','.','.','.','.','o','.','.','#','.','.','.','#','.','.','o','.','.','.','.','#',},
    {'#','#','#','#','#','o','#','.','#','#','#','#','#','.','#','o','#','#','#','#','#',},
    {'#','#','#','#','#','o','#','.','.','.','0','.','.','.','#','o','#','#','#','#','#',},
    {'#','#','#','#','#','o','#','.','#','#','#','#','#','.','#','o','#','#','#','#','#',},
    {'#','#','o','o','o','o','o','o','o','o','#','o','o','o','o','o','o','o','o','#','#',},
    {'#','#','o','#','#','o','#','#','#','o','#','o','#','#','#','o','#','#','o','#','#',},
    {'#','#','o','o','#','o','o','o','o','o','o','o','o','o','o','o','#','o','o','#','#',},
    {'#','#','#','o','#','o','#','o','#','#','#','#','#','o','#','o','#','o','#','#','#',},
    {'#','#','o','o','o','o','#','o','o','o','#','o','o','o','#','o','o','o','o','#','#',},
    {'#','#','o','#','#','#','#','#','#','o','#','o','#','#','#','#','#','#','o','#','#',},
    {'#','#','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
}};


const std::array<std::array<char, 21>, 21> EXAMPLE_MAP = {{
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','0','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','o','#',},
    {'#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','.','.','.','.','.','#','.','.','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','.','#','#','#','#','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','.','.','.','.','.','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','.','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','.','.','.','.','.','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','.','#','#','#','#','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','.','.','.','.','.','.','.','#','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','o','.','.','.','.','.','.','.','.','#','#','#','#','#','#','#','#','#','#','#',},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
}};


template<int w, int h>
class MapGenerator
{
public:
    MapGenerator() : width(w), height(h)
    {
    }

    Grid<w, h> generateMap(std::array<std::array<char, w>, h> map) {
        Grid<w,h> labyrinth;
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                labyrinth[y][x] = char_to_tile(map[y][x]);
            }
        }
        return labyrinth;
    }

    Tile char_to_tile(char c) {
        switch (c) {
        case '.':
            return Tile::Blank;
        case '#':
            return Tile::Wall;
        case 'o':
            return Tile::Coin;
        case '0':
            return Tile::Player;
        default:
            assert(false);
        }
    }

private:
    const int width;
    const int height;

    std::mt19937 generator{std::random_device{}()};
    std::uniform_int_distribution<unsigned> distribution{0,1};
    decltype(bind(std::ref(distribution), std::ref(generator))) bool_coin{
      bind(std::ref(distribution), std::ref(generator))
    };
};

#endif // MAPGENERATOR_H
